!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
capabilities_dispatcher_1	input_capabilities_dispatchers.c	/^int		capabilities_dispatcher_1(t_input_data *input_data, t_sh_state *sh_state)$/;"	f
capabilities_dispatcher_2	input_capabilities_dispatchers.c	/^int		capabilities_dispatcher_2(t_input_data *input_data)$/;"	f
capabilities_dispatcher_3	input_capabilities_dispatchers.c	/^int		capabilities_dispatcher_3(t_input_data *input_data)$/;"	f
capabilities_dispatcher_4	input_capabilities_dispatchers.c	/^int		capabilities_dispatcher_4(t_input_data *input_data, t_list *hist_copy)$/;"	f
clear_input	input_action_handlers.c	/^int		clear_input(t_input_data *input_data)$/;"	f
complete_arg	completion.c	/^static int	complete_arg(t_input_data *input, char *word, t_sh_state *state)$/;"	f	file:
complete_bin	completion.c	/^static int	complete_bin(char *word, t_sh_state *sh_state, t_input_data *input)$/;"	f	file:
complete_word	completion.c	/^static int	complete_word(t_input_data *input, char *completed, size_t add_slash)$/;"	f	file:
count_escape_chars	input_utils.c	/^int		count_escape_chars(char *str)$/;"	f
delete_completed	completion.c	/^static int	delete_completed(t_input_data *input)$/;"	f	file:
delete_cur_char	input_control.c	/^int		delete_cur_char(t_input_data *input_data)$/;"	f
delete_prev_char	input_control.c	/^int		delete_prev_char(t_input_data *input_data)$/;"	f
dup_history	input_call_history.c	/^int		dup_history(t_input_data *input_data, t_list **hist_copy)$/;"	f
find_in_dir	completion.c	/^static int	find_in_dir(t_list *files, t_input_data *input, char *needle)$/;"	f	file:
free_hist_copy	input_call_history.c	/^int		free_hist_copy(t_list **hist_copy, int res)$/;"	f
get_buf	input_main_process.c	/^static int		get_buf(t_dyn_buf *build_buf)$/;"	f	file:
get_builtins	completion.c	/^static int		get_builtins(t_list **files, char *needle)$/;"	f	file:
get_current_word	completion.c	/^static char	*get_current_word(t_input_data *input, t_sh_state *sh_state)$/;"	f	file:
get_files	completion.c	/^static t_list	*get_files(char *path, char *needle,$/;"	f	file:
get_path	completion.c	/^static char	*get_path(t_input_data *input, size_t get_all)$/;"	f	file:
get_var_name_length	completion.c	/^static size_t	get_var_name_length(char *str)$/;"	f	file:
get_vars	completion.c	/^static int		get_vars(t_list **files, t_list *storage, char *needle)$/;"	f	file:
handle_capabilities	input_handlers.c	/^int		handle_capabilities(t_input_data *input_data,$/;"	f
handle_completion	completion.c	/^int		handle_completion(t_input_data *input, t_sh_state *sh_state)$/;"	f
handle_completion_type	completion.c	/^static int	handle_completion_type(t_input_data *input, t_sh_state *sh_state, char *word)$/;"	f	file:
handle_enter	input_action_handlers.c	/^int		handle_enter(t_input_data *input_data)$/;"	f
handle_expand	completion.c	/^static char	*handle_expand(char *word, t_sh_state *sh_state)$/;"	f	file:
handle_input	input_main_process.c	/^int		handle_input(t_sh_state *sh_state, t_input_data *input_data,$/;"	f
handle_insertion	input_handlers.c	/^int		handle_insertion(t_input_data *input_data)$/;"	f
handle_quotes	completion.c	/^static char	*handle_quotes(char *word)$/;"	f	file:
handle_sig	input_handlers.c	/^int		handle_sig(t_input_data *input_data, t_sh_state *sh_state)$/;"	f
handle_user_reset	input_action_handlers.c	/^int		handle_user_reset(t_input_data *input_data)$/;"	f
here_doc_is_closed	input_validator.c	/^int		here_doc_is_closed(t_dyn_buf *dyn_buf, char *here_doc)$/;"	f
hist_move_down	input_call_history.c	/^int		hist_move_down(t_input_data *input_data, t_list *hist_copy)$/;"	f
hist_move_up	input_call_history.c	/^int		hist_move_up(t_input_data *input_data, t_list *hist_copy)$/;"	f
insertn_chars	input_control.c	/^int		insertn_chars(t_input_data *input_data, const char *str, size_t n, int force)$/;"	f
is_capability	input_utils.c	/^int		is_capability(char *s)$/;"	f
is_closed	completion.c	/^static int	is_closed(char *str, char *base)$/;"	f	file:
is_dir	completion.c	/^static size_t	is_dir(char *path)$/;"	f	file:
is_escaped	input_utils.c	/^int		is_escaped(char *str, size_t i)$/;"	f
is_path	completion.c	/^static int	is_path(const char *word)$/;"	f	file:
is_reversed_closed	completion.c	/^static int	is_reversed_closed(char *str, char *base)$/;"	f	file:
is_sig	input_utils.c	/^int		is_sig(char *s)$/;"	f
is_stopping	completion.c	/^static int	is_stopping(char str)$/;"	f	file:
lstfree	completion.c	/^static int		lstfree(t_list *list)$/;"	f	file:
lstmerge	completion.c	/^static void	lstmerge(t_list **list1, t_list *list2)$/;"	f	file:
merge_bufs	input_bufs_utils.c	/^int		merge_bufs(t_input_data *input_data, t_list *hist_copy, char *here_doc)$/;"	f
operator_is_lonely	input_validator.c	/^static int		operator_is_lonely(t_dyn_buf *dyn_buf)$/;"	f	file:
output_is_ready	input_validator.c	/^int		output_is_ready(t_dyn_buf *dyn_buf, int valid_here_doc)$/;"	f
prepare_input	input_bufs_utils.c	/^int		prepare_input(t_input_data *input_data, const char *here_doc)$/;"	f
print_anew	input_control.c	/^int		print_anew(t_cur_abs_pos *start_pos, t_dyn_buf *active_buf, size_t rel_cur_pos)$/;"	f
process_buf	input_main_process.c	/^static int		process_buf(t_input_data *input_data, t_sh_state *sh_state, t_list *hist_copy)$/;"	f	file:
process_entry	input_main_process.c	/^static int		process_entry(t_input_data *input_data, t_sh_state *sh_state, t_list *hist_copy)$/;"	f	file:
quotes_are_closed	input_validator.c	/^static int		quotes_are_closed(t_dyn_buf *dyn_buf)$/;"	f	file:
reset_input	input_bufs_utils.c	/^void	reset_input(t_input_data *input_data)$/;"	f
search_for_quote	input_validator.c	/^static void	search_for_quote(size_t i, int *opened, int *quote_type, t_dyn_buf *dyn_buf)$/;"	f	file:
trim	completion.c	/^static char	*trim(char *str)$/;"	f	file:
write_file	completion.c	/^static void	write_file(char *file)$/;"	f	file:
